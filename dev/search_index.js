var documenterSearchIndex = {"docs":
[{"location":"tir_saturation.html#Saturation-of-pair-of-spins-:-direct-and-indirect-solutions","page":"Bi-saturation (indirect)","title":"Saturation of pair of spins : direct and indirect solutions","text":"","category":"section"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"Previously, we attempted to solve the bi-saturation problem as mentioned in [1] using a direct method. We will now proceed to solve the same problem using an indirect method, which will require us to use the solution from the direct method as an initial guess. ","category":"page"},{"location":"tir_saturation.html#Direct-Method-:","page":"Bi-saturation (indirect)","title":"Direct Method :","text":"","category":"section"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"Let's first import the necessary packages, OptimalControl, Plots ... : ","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"using OptimalControl\nusing NLPModelsIpopt\nusing Plots\nusing OrdinaryDiffEq\nusing LinearAlgebra\nusing MINPACK","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"We will now define the parameters and the functions that we will use later on : ","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"# Define the parameters of the problem\nΓ = 9.855e-2  \nγ = 3.65e-3   \nϵ = 0.1\nq0 = [0, 1, 0, 1]\n\nfunction F0i(q)\n    y, z = q\n    res = [-Γ*y, γ*(1-z)]\n    return res\nend\n\nfunction F1i(q)\n    y, z = q\n    res = [-z, y]\n    return res\nend\n\nF0(q) = [ F0i(q[1:2]); F0i(q[3:4]) ]\nF1(q) = [ F1i(q[1:2]); (1 - ϵ) * F1i(q[3:4]) ]\nfunction ocp(q₁₀, q₂₀)\n    @def o begin\n        tf ∈ R, variable\n        t ∈ [0, tf], time\n        q = (y₁, z₁, y₂, z₂) ∈ R⁴, state\n        u ∈ R, control\n        tf ≥ 0\n        -1 ≤ u(t) ≤ 1\n        qᵢ₁ = [y₁, z₁]\n        qᵢ₂ = [y₂, z₂]\n        qᵢ₁(0) == q₁₀\n        qᵢ₂(0) == q₂₀\n        qᵢ₁(tf) == [0, 0]\n        qᵢ₂(tf) == [0, 0]\n        q̇(t) == F0(q(t)) + u(t) * F1(q(t))\n        tf → min\n    end\n    return o\nend\n\n# Function to plot the solution of the optimal control problem\nfunction plot_sol(sol)\n    q = sol.state\n    liste = [q(t) for t in sol.times]\n    liste_y1 = [elt[1] for elt in liste]\n    liste_z1 = [elt[2] for elt in liste]\n    liste_y2 = [elt[3] for elt in liste]\n    liste_z2 = [elt[4] for elt in liste]\n    plot(\n        plot(liste_y1, liste_z1, xlabel=\"y1\", ylabel=\"z1\"),\n        plot(liste_y2, liste_z2, xlabel=\"y2\", ylabel=\"z2\"),\n        plot(sol.times, sol.control, xlabel=\"Time\", ylabel=\"Control\")\n    )\nend","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"We will use the same technique used before to solve the problem which involves using the solution of the same problem but with a slight change in the initial conditions, as an initial guess. ","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"prob = ocp([0, 1], [0, 1])\nocp_h = ocp([0.1, 0.9], [0.1, 0.9])\ninitial_g = solve(ocp_h, grid_size=100)","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"The provided code performs an iterative process to refine the solution. ","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"for i ∈ 1:10\n    global initial_g\n    solf = solve(prob, grid_size=i*100, init=initial_g)\n    initial_g = solf\nend\ndirect_sol = initial_g","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"We will now plot the solution : ","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"plt = plot(direct_sol, solution_label=\"(direct)\", size=(800, 800))","category":"page"},{"location":"tir_saturation.html#Indirect-Method","page":"Bi-saturation (indirect)","title":"Indirect Method","text":"","category":"section"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"A quick look on the plot of the control u, reveals that the optimal solution consists of a bang arc with minimal control(-1), followed by a singular arc, then another bang arc with maximal control (+1), and the final arc is a singular arc, which means that we have a solution with a structure of the form BSBS, i.e. Bang-Singular-Bang-Singular [1].  First, let's define the Hamiltonian operator. Since : ","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"qdot = F_0(q) + u * F_1(q)","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"then","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"H(qp) = p * F_0(q) + u * p * F_1(q)","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"We'll note H_0(qp) = p * F_0(q)  and H_1(qp) = p * F_1(q) Let u_+ = 1, the positive bang control (resp. u_- = -1 the negative bang control),  and math  u_s(q,p) = \\frac{H_{001}}{H_{101}}  the singular control, where : H_001 = H_0  H_0 H_1 H_101 = H_1 H_0 H_1 and for two Hamiltonien operators H_0 H_1 :  ","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"H_0 H_1=(nabla_p H_0   nabla_x H_1 )  (nabla_x H_0  nabla_p H_1)","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"First, we refine the solution with a higher grid size for better accuracy. We also lift the vector fields to their Hamiltonian counterparts and compute the Lie brackets of these Hamiltonian vector fields. Additionally, we define the singular control function and extract the solution components.","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"# Refine the solution with a higher grid size for better accuracy\nsolution_2000 = solve(prob, grid_size=2000, display=false, init=initial_g)\n\n# Lift the vector fields to their Hamiltonian counterparts\nH0 = Lift(F0) \nH1 = Lift(F1)\n\n# Compute the Lie brackets of the Hamiltonian vector fields\nH01  = @Lie { H0, H1 }\nH001 = @Lie { H0, H01 }\nH101 = @Lie { H1, H01 }\n\n# Define the singular control function\nus(q, p) = -H001(q, p) / H101(q, p)\n\n#~Define the maximum control\numax = 1\n\n# Extract the solution components\nt = solution_2000.times\nq = solution_2000.state\nu = solution_2000.control\np = solution_2000.costate\n\n# Define the flows for maximum, minimum, and singular controls\nfₚ = Flow(prob, (q, p, tf) -> umax)\nfₘ = Flow(prob, (q, p, tf) -> -umax)\nfs = Flow(prob, (q, p, tf) -> us(q, p))","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"Next, we define a function to compute the shooting function for the indirect method. This function calculates the state and costate at the switching times and populates the shooting function residuals.","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"# Function to compute the shooting function for the indirect method\nfunction shoot!(s, p0, t1, t2, t3, tf, q1, p1, q2, p2, q3, p3)\n    qi1, pi1 = fₘ(0, q0, p0, t1)\n    qi2, pi2 = fs(t1, q1, p1, t2)\n    qi3, pi3 = fₚ(t2, q2, p2, t3)\n    qf, pf = fs(t3, q3, p3, tf)\n    s[1] = H0(q0, p0) - umax * H1(q0, p0) - 1  \n    s[2] = H1(q1, p1)\n    s[3] = H01(q1, p1)\n    s[4] = H1(q3, p3)\n    s[5] = H01(q3, p3)\n    s[6] = qf[3]\n    s[7] = qf[4]\n    s[8] = (pf[2] + pf[4]) * γ - 1\n    s[9:12] = qi1 - q1\n    s[13:16] = pi1 - p1\n    s[17:20] = qi2 - q2\n    s[21:24] = pi2 - p2\n    s[25:28] = qi3 - q3\n    s[29:32] = pi3 - p3\nend","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"We then initialize parameters to find the switching times. We identify the intervals where the control is near zero, indicating singular control, and determine the switching times.","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"# Initialize parameters for finding switching times\nt0 = 0\ntol = 2e-2\n\n# Find times where control is near zero (singular control)\nt13 = [elt for elt in t if abs(u(elt)) < tol]\ni = 1\nt_l = []\n\n# Identify intervals for switching times\nwhile true\n    global i, t13, t_l\n    if (( i == length(t13)-1) || (t13[i+1] - t13[i] > 1) )\n        break\n    else \n        push!(t_l, t13[i])\n        push!(t_l, t13[i+1])\n        i += 1\n    end\nend\n\n# Determine the switching times\nt1 = min(t_l...)\nt2 = max(t_l...)\nt3f = [elt for elt in t13 if elt > t2]\nt3 = min(t3f...)\n\n# Extract initial and intermediate costates and states and final time\np0 = p(t0) \nq0 = [0, 1, 0, 1]\ntf = solution_2000.objective\nq1, p1 = q(t1), p(t1)\nq2, p2 = q(t2), p(t2)\nq3, p3 = q(t3), p(t3)\np0[1], q0[1], p0[3], q0[3]= -p0[1], -q0[1], -p0[3], -q0[3]\np1[1], q1[1], p1[3], q1[3]= -p1[1], -q1[1], -p1[3], -q1[3]\np2[1], q2[1], p2[3], q2[3]= -p2[1], -q2[1], -p2[3], -q2[3]\np3[1], q3[1], p3[3], q3[3]= -p3[1], -q3[1], -p3[3], -q3[3]","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"Next, we initialize the shooting function residuals and compute the initial residuals for the shooting function to verify the solution's accuracy. ","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"# Initialize the shooting function residuals\ns = similar(p0, 32)\n\n# Compute the initial residuals for the shooting function\n## shoot!(s, p0, t1, t2, t3, tf, q1, p1, q2, p2, q3, p3)\n## println(\"Norm of the shooting function: ‖s‖ = \", norm(s), \"\\n\")\n","category":"page"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"We define a nonlinear equation solver for the shooting method. This solver refines the initial costate and switching times to find the optimal solution using the shooting function.","category":"page"},{"location":"tir_saturation.html#TO-BE-COMPLETED","page":"Bi-saturation (indirect)","title":"TO BE COMPLETED","text":"","category":"section"},{"location":"tir_saturation.html#References","page":"Bi-saturation (indirect)","title":"References","text":"","category":"section"},{"location":"tir_saturation.html","page":"Bi-saturation (indirect)","title":"Bi-saturation (indirect)","text":"[1]: Bernard Bonnard, Olivier Cots, Jérémy Rouot, Thibaut Verron. Time minimal saturation of a pair of spins and application in magnetic resonance imaging. Mathematical Control and Related Fields, 2020, 10 (1), pp.47-88.","category":"page"},{"location":"bisaturation.html#Saturation-of-pair-of-spins","page":"Bi-saturation (direct)","title":"Saturation of pair of spins","text":"","category":"section"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"The problem we are trying to solve is the time minimal saturation of a pair of spin-12 particles (or bi-saturation problem), as described in [1]. This model describes a pair of spins that share the same characteristics, specifically the same relaxation times T_1 and T_2. However, the control field intensity differs for each spin due to variations as they transition from the North Pole N = (01) to the origin O=(00):","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"begincases\nt_f rightarrow min \ndotq(t) = F(q(t)) + u(t) G(q(t)) quad u(t) leq 1 quad t in 0 t_f \nq(0) = q_0 \nq(t_f) = q_f\nendcases","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"where q_0=0101, q_f=0000 and F and G are defined by (2) on page 5, as well as in sections 2.1 and 3.1.","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"We first define the problem.","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"using OptimalControl\nusing NLPModelsIpopt\nusing Plots\n\nΓ = 9.855e-2\nγ = 3.65e-3\nϵ = 0.1\n\nfunction F0(q)\n    y, z = q\n    res = [-Γ*y, γ*(1-z)]\n    return res\nend\n\n# idem for F1\nfunction F1(q)\n    y, z = q\n    res = [-z, y]\n    return res\nend\n\nF0(q₁, q₂) = [ F0(q₁); F0(q₂) ]\nF1(q₁, q₂, ε) = [ F1(q₁); (1 - ε) * F1(q₂) ]\n\n# Define the optimal control problem with initial state q₀ in the case of one spin\nfunction ocp1(q₀)\n    @def o begin\n        tf ∈ R, variable\n        t ∈ [0, tf], time\n        q = (y, z) ∈ R², state\n        u ∈ R, control\n        tf ≥ 0\n        -1 ≤ u(t) ≤ 1\n        q(0) == q₀\n        q(tf) == [0, 0]\n        q̇(t) == F0(q(t)) + u(t) * F1(q(t))\n        tf → min\n    end\n    return o\nend\n\n# Define the optimal control problem with initial state q₀ in the case of two spins\nfunction ocp2(q₁₀, q₂₀, ε)\n    @def o begin\n        tf ∈ R, variable\n        t ∈ [0, tf], time\n        q = (y₁, z₁, y₂, z₂) ∈ R⁴, state\n        u ∈ R, control\n        tf ≥ 0\n        -1 ≤ u(t) ≤ 1\n        qᵢ₁ = [y₁, z₁]\n        qᵢ₂ = [y₂, z₂]\n        qᵢ₁(0) == q₁₀\n        qᵢ₂(0) == q₂₀\n        qᵢ₁(tf) == [0, 0]\n        qᵢ₂(tf) == [0, 0]\n        q̇(t) == F0(qᵢ₁(t), qᵢ₂(t)) + u(t) * F1(qᵢ₁(t), qᵢ₂(t), ε)\n        tf → min\n    end\n    return o\nend\nprob = ocp2([0,1], [0,1], ϵ)","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"However, we quickly realize that solving this problem without any prior initial guesses is not feasible. This realization prompts us to explore potential solutions that facilitate problem-solving.","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"One effective approach involves homotopy on the initial condition. This method begins from an initial point where the problem can be resolved without requiring any initial guesses. Subsequently, we generate a sequence of initial guesses by solving intermediate problems created through homotopy, gradually progressing towards our original initial condition: 0 1 0 1. Using 1 0 1 0 as our initial guess revealed that it can serve as the starting point for this homotopy process.","category":"page"},{"location":"bisaturation.html#Homotopy-on-the-initial-condition","page":"Bi-saturation (direct)","title":"Homotopy on the initial condition","text":"","category":"section"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"The code below demonstrates how this approach systematically generates initial guesses using homotopy starting from 1 0 1 0, advancing towards the desired initial condition of 0 1 0 1.","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"\nfunction plot_sol(sol)\n    q = sol.state\n    liste = [q(t) for t in sol.times]\n    liste_y1 = [elt[1] for elt in liste]\n    liste_z1 = [elt[2] for elt in liste]\n    liste_y2 = [elt[3] for elt in liste]\n    liste_z2 = [elt[4] for elt in liste]\n    plot(\n        plot(liste_y1, liste_z1, xlabel=\"y1\", ylabel=\"z1\"),\n        plot(liste_y2, liste_z2, xlabel=\"y2\", ylabel=\"z2\"),\n        plot(sol.times, sol.control, xlabel=\"Time\", ylabel=\"Control\")\n    )\nend","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"Then we perform homotopy on the initial condition with a step of 0.1,","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"q₀₁ = [1, 0]\nocp_x = ocp2(q₀₁, q₀₁, ϵ)\nsol_x = solve(ocp_x, grid_size=100)\nsol_x.variable\nL_x = [sol_x]\nfor i in 1:10\n    x₀ = i / 10 * [0, 1, 0, 1] + (1 - i / 10) * [1, 0, 1, 0]\n    ocpi_x = ocp2(x₀[1:2], x₀[3:4], ϵ)\n    sol_i_x = solve(ocpi_x, grid_size=100, display=false, init=L_x[end]) \n    push!(L_x, sol_i_x)\nend\nnothing # hide","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"and plot the solutions.","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"solution_x = L_x[end]\nsolution_x.variable\nplot_sol(solution_x)","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"Conclusion: The solution is considered local, as the final time exceeds the one found using the Bocop software as mentioned in [1]. Let us now solve this problem differently. One potential initial guess could be obtained by solving a monosaturation problem where the control field intensity is the same for both spins, i.e., ϵ = 0, and then using homotopy to transition to ϵ = 01. We start by solving the problem for a single spin and then extend this approach to two identical spins before applying homotopy.","category":"page"},{"location":"bisaturation.html#Homotopy-on-ϵ","page":"Bi-saturation (direct)","title":"Homotopy on ϵ","text":"","category":"section"},{"location":"bisaturation.html#Monosaturation-problem","page":"Bi-saturation (direct)","title":"Monosaturation problem","text":"","category":"section"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"q₀ = [0, 1]\nocp = ocp1(q₀)\nN = 100\nsol = solve(ocp, grid_size=N) ","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"Now we extract the control, final time and then duplicate the state to be able to have an initial guess for the two spins.","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"u_init = sol.control  \nq_init(t) = [sol.state(t); sol.state(t)]\ntf_init = sol.variable","category":"page"},{"location":"bisaturation.html#Bi-saturation-problem","page":"Bi-saturation (direct)","title":"Bi-saturation problem","text":"","category":"section"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"ocp_0 = ocp2(q₀, q₀, 0)\ninit = (state=q_init, control=u_init, variable=tf_init)\nsol2 = solve(ocp_0 ; grid_size=N, init=init)","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"We define the function below that computes the problem depending on varepsilon: ","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"\nϵ₁ = 0\ninitial_guess = sol2\nL = [sol2]\nfor i in 1:10\n    global ϵ₁ = ϵ₁ + 0.01\n    ocpi = ocp2(q₀, q₀, ϵ₁)\n    sol_i = solve(ocpi, grid_size=100, display=false, init=initial_guess)\n    global L\n    push!(L, sol_i)\n    global initial_guess = sol_i\nend\nsol_eps = L[end]\nsol_eps.variable\nplot_sol(sol_eps)","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"Conclusion: The solution is a local one.","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"Another approach involves defining a bi-saturation problem with a slightly adjusted initial condition: q₀ = 01 09 01 09.","category":"page"},{"location":"bisaturation.html#Bi-Saturation-Problem:-initial-Guess-from-a-Slightly-Different-Problem","page":"Bi-saturation (direct)","title":"Bi-Saturation Problem: initial Guess from a Slightly Different Problem","text":"","category":"section"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"ϵ = 0.1\nq₁₉ = [0.1, 0.9]\nocpu = ocp2(q₁₉, q₁₉, ϵ)\ninitial_g = solve(ocpu, grid_size=100)\nocpf = prob\nfor i in 1:10\n    global initial_g\n    solf = solve(ocpf, grid_size=i*100, init=initial_g)\n    initial_g = solf\nend\n# Plot the figures\nplot_sol(initial_g)","category":"page"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"Conclusion: This solution is better that the two previous, which proves that these were strict local minimisers.","category":"page"},{"location":"bisaturation.html#References","page":"Bi-saturation (direct)","title":"References","text":"","category":"section"},{"location":"bisaturation.html","page":"Bi-saturation (direct)","title":"Bi-saturation (direct)","text":"[1]: Bernard Bonnard, Olivier Cots, Jérémy Rouot, Thibaut Verron. Time minimal saturation of a pair of spins and application in magnetic resonance imaging. Mathematical Control and Related Fields, 2020, 10 (1), pp.47-88.","category":"page"},{"location":"index.html#spin","page":"Introduction","title":"spin","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"spin is part of the control-toolbox ecosystem.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"note: Install\nTo install a package from the control-toolbox ecosystem,  please visit the installation page.","category":"page"}]
}
